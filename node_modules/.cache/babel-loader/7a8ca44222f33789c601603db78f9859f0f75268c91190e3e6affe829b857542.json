{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 2,\n  class: \"success-page\"\n};\nconst _hoisted_3 = {\n  class: \"contact-item\"\n};\nconst _hoisted_4 = {\n  class: \"contact-item\"\n};\nconst _hoisted_5 = {\n  class: \"contact-item\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SuccessComponent = _resolveComponent(\"SuccessComponent\");\n  return $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading...\")) : $data.showSuccess ? (_openBlock(), _createBlock(_component_SuccessComponent, {\n    key: 1,\n    transactions: $data.transactions\n  }, null, 8, [\"transactions\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Transaction Summary\", -1)), _createElementVNode(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", null, \"Account Balance\", -1)), _createElementVNode(\"span\", null, _toDisplayString($data.balance), 1)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.contacts, contact => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: contact.id,\n      class: \"contact-item\"\n    }, [_createElementVNode(\"span\", null, _toDisplayString(contact.name), 1), _createElementVNode(\"span\", null, _toDisplayString($props.amount), 1)]);\n  }), 128)), _createElementVNode(\"div\", _hoisted_4, [_cache[2] || (_cache[2] = _createElementVNode(\"span\", null, \"Total Amount\", -1)), _createElementVNode(\"span\", null, _toDisplayString($options.totalAmount), 1)]), _createElementVNode(\"div\", _hoisted_5, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", null, \"Balance After\", -1)), _createElementVNode(\"span\", null, _toDisplayString($options.balanceAfter), 1)]), _createElementVNode(\"button\", {\n    class: \"primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.proceed && $options.proceed(...args))\n  }, \"Proceed\")]));\n}","map":{"version":3,"names":["key","class","$data","loading","_createElementBlock","_hoisted_1","showSuccess","_createBlock","_component_SuccessComponent","transactions","_hoisted_2","_createElementVNode","_hoisted_3","_toDisplayString","balance","_Fragment","_renderList","$props","contacts","contact","id","name","amount","_hoisted_4","$options","totalAmount","_hoisted_5","balanceAfter","onClick","_cache","args","proceed"],"sources":["/home/runner/work/easyzend-frontend/easyzend-frontend/src/components/private/Pages/Precess.vue"],"sourcesContent":["<template>\n    <div v-if=\"loading\">Loading...</div>\n    <SuccessComponent v-else-if=\"showSuccess\" :transactions=\"transactions\" />\n    <div v-else class=\"success-page\">\n        <h2>Transaction Summary</h2>\n\n        <div class=\"contact-item\">\n            <span>Account Balance</span>\n            <span>{{ balance }}</span>\n        </div>\n        <div v-for=\"contact in contacts\" :key=\"contact.id\" class=\"contact-item\">\n            <span>{{ contact.name }}</span>\n            <span>{{ amount }}</span>\n        </div>\n        <div class=\"contact-item\">\n            <span>Total Amount</span>\n            <span>{{ totalAmount }}</span>\n        </div>\n        <div class=\"contact-item\">\n            <span>Balance After</span>\n            <span>{{ balanceAfter }}</span>\n        </div>\n        <button class=\"primary\" @click=\"proceed\">Proceed</button>\n    </div>\n</template>\n\n<script>\nimport SuccessComponent from './Success.vue';\n\nexport default {\n    name: 'ProcessComponent',\n    props: ['amount', 'contacts'],\n    components: {\n        SuccessComponent\n    },\n    data() {\n        return {\n            balance: 2000000,\n            loading: false,\n            showSuccess: false,\n            transactions: []\n        }\n    },\n    computed: {\n        totalAmount() {\n            return this.amount * this.contacts.length;\n        },\n        balanceAfter() {\n            return this.balance - this.totalAmount;\n        }\n    },\n    methods: {\n        async proceed() {\n            this.loading = true;\n            this.transactions = this.contacts.map(contact => ({\n                name: contact.name,\n                amount: this.amount\n            }));\n\n            // Simulate API call\n            setTimeout(() => {\n                this.loading = false;\n                this.showSuccess = true;\n                console.log('Transactions sent successfully', this.transactions);\n            }, 2000);\n\n            // Uncomment and use the actual API call\n            // try {\n            //     const response = await fetch('https://api.example.com/transactions', {\n            //         method: 'POST',\n            //         headers: {\n            //             'Content-Type': 'application/json'\n            //         },\n            //         body: JSON.stringify(this.transactions)\n            //     });\n\n            //     if (response.ok) {\n            //         this.loading = false;\n            //         this.showSuccess = true;\n            //         console.log('Transactions sent successfully', this.transactions);\n            //     } else {\n            //         this.loading = false;\n            //         console.error('Failed to send transactions');\n            //     }\n            // } catch (error) {\n            //     this.loading = false;\n            //     console.error('Error sending transactions:', error);\n            // }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.success-page {\n    text-align: center;\n    margin-top: 20px;\n}\n.contact-item {\n    display: flex;\n    justify-content: space-between;\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAGgBC,KAAK,EAAC;;;EAGTA,KAAK,EAAC;AAAc;;EAQpBA,KAAK,EAAC;AAAc;;EAIpBA,KAAK,EAAC;AAAc;;;SAjBlBC,KAAA,CAAAC,OAAO,I,cAAlBC,mBAAA,CAAoC,OADxCC,UAAA,EACwB,YAAU,KACDH,KAAA,CAAAI,WAAW,I,cAAxCC,YAAA,CAAyEC,2BAAA;IAF7ER,GAAA;IAE+CS,YAAY,EAAEP,KAAA,CAAAO;kDACzDL,mBAAA,CAoBM,OApBNM,UAoBM,G,0BAnBFC,mBAAA,CAA4B,YAAxB,qBAAmB,QAEvBA,mBAAA,CAGM,OAHNC,UAGM,G,0BAFFD,mBAAA,CAA4B,cAAtB,iBAAe,QACrBA,mBAAA,CAA0B,cAAAE,gBAAA,CAAjBX,KAAA,CAAAY,OAAO,M,sBAEpBV,mBAAA,CAGMW,SAAA,QAbdC,WAAA,CAU+BC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBf,mBAAA,CAGM;MAH4BJ,GAAG,EAAEmB,OAAO,CAACC,EAAE;MAAEnB,KAAK,EAAC;QACrDU,mBAAA,CAA+B,cAAAE,gBAAA,CAAtBM,OAAO,CAACE,IAAI,OACrBV,mBAAA,CAAyB,cAAAE,gBAAA,CAAhBI,MAAA,CAAAK,MAAM,M;aAEnBX,mBAAA,CAGM,OAHNY,UAGM,G,0BAFFZ,mBAAA,CAAyB,cAAnB,cAAY,QAClBA,mBAAA,CAA8B,cAAAE,gBAAA,CAArBW,QAAA,CAAAC,WAAW,M,GAExBd,mBAAA,CAGM,OAHNe,UAGM,G,0BAFFf,mBAAA,CAA0B,cAApB,eAAa,QACnBA,mBAAA,CAA+B,cAAAE,gBAAA,CAAtBW,QAAA,CAAAG,YAAY,M,GAEzBhB,mBAAA,CAAyD;IAAjDV,KAAK,EAAC,SAAS;IAAE2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,QAAA,CAAAO,OAAA,IAAAP,QAAA,CAAAO,OAAA,IAAAD,IAAA,CAAO;KAAE,SAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}