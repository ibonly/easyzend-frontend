{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport SuccessComponent from './Success.vue';\nexport default {\n  name: 'ProcessComponent',\n  props: ['amount', 'contacts'],\n  components: {\n    SuccessComponent\n  },\n  data() {\n    return {\n      balance: 2000000,\n      loading: false,\n      showSuccess: false,\n      transactions: []\n    };\n  },\n  computed: {\n    totalAmount() {\n      return this.amount * this.contacts.length;\n    },\n    balanceAfter() {\n      return this.balance - this.totalAmount;\n    }\n  },\n  methods: {\n    async proceed() {\n      this.loading = true;\n      this.transactions = this.contacts.map(contact => ({\n        name: contact.name,\n        amount: this.amount\n      }));\n\n      // Simulate API call\n      setTimeout(() => {\n        this.loading = false;\n        this.showSuccess = true;\n        console.log('Transactions sent successfully', this.transactions);\n      }, 2000);\n\n      // Uncomment and use the actual API call\n      // try {\n      //     const response = await fetch('https://api.example.com/transactions', {\n      //         method: 'POST',\n      //         headers: {\n      //             'Content-Type': 'application/json'\n      //         },\n      //         body: JSON.stringify(this.transactions)\n      //     });\n\n      //     if (response.ok) {\n      //         this.loading = false;\n      //         this.showSuccess = true;\n      //         console.log('Transactions sent successfully', this.transactions);\n      //     } else {\n      //         this.loading = false;\n      //         console.error('Failed to send transactions');\n      //     }\n      // } catch (error) {\n      //     this.loading = false;\n      //     console.error('Error sending transactions:', error);\n      // }\n    }\n  }\n};","map":{"version":3,"names":["SuccessComponent","name","props","components","data","balance","loading","showSuccess","transactions","computed","totalAmount","amount","contacts","length","balanceAfter","methods","proceed","map","contact","setTimeout","console","log"],"sources":["/home/runner/work/easyzend-frontend/easyzend-frontend/src/components/private/Pages/Precess.vue"],"sourcesContent":["<template>\n    <div v-if=\"loading\">Loading...</div>\n    <SuccessComponent v-else-if=\"showSuccess\" :transactions=\"transactions\" />\n    <div v-else class=\"success-page\">\n        <h2>Transaction Summary</h2>\n\n        <div class=\"contact-item\">\n            <span>Account Balance</span>\n            <span>{{ balance }}</span>\n        </div>\n        <div v-for=\"contact in contacts\" :key=\"contact.id\" class=\"contact-item\">\n            <span>{{ contact.name }}</span>\n            <span>{{ amount }}</span>\n        </div>\n        <div class=\"contact-item\">\n            <span>Total Amount</span>\n            <span>{{ totalAmount }}</span>\n        </div>\n        <div class=\"contact-item\">\n            <span>Balance After</span>\n            <span>{{ balanceAfter }}</span>\n        </div>\n        <button class=\"primary\" @click=\"proceed\">Proceed</button>\n    </div>\n</template>\n\n<script>\nimport SuccessComponent from './Success.vue';\n\nexport default {\n    name: 'ProcessComponent',\n    props: ['amount', 'contacts'],\n    components: {\n        SuccessComponent\n    },\n    data() {\n        return {\n            balance: 2000000,\n            loading: false,\n            showSuccess: false,\n            transactions: []\n        }\n    },\n    computed: {\n        totalAmount() {\n            return this.amount * this.contacts.length;\n        },\n        balanceAfter() {\n            return this.balance - this.totalAmount;\n        }\n    },\n    methods: {\n        async proceed() {\n            this.loading = true;\n            this.transactions = this.contacts.map(contact => ({\n                name: contact.name,\n                amount: this.amount\n            }));\n\n            // Simulate API call\n            setTimeout(() => {\n                this.loading = false;\n                this.showSuccess = true;\n                console.log('Transactions sent successfully', this.transactions);\n            }, 2000);\n\n            // Uncomment and use the actual API call\n            // try {\n            //     const response = await fetch('https://api.example.com/transactions', {\n            //         method: 'POST',\n            //         headers: {\n            //             'Content-Type': 'application/json'\n            //         },\n            //         body: JSON.stringify(this.transactions)\n            //     });\n\n            //     if (response.ok) {\n            //         this.loading = false;\n            //         this.showSuccess = true;\n            //         console.log('Transactions sent successfully', this.transactions);\n            //     } else {\n            //         this.loading = false;\n            //         console.error('Failed to send transactions');\n            //     }\n            // } catch (error) {\n            //     this.loading = false;\n            //     console.error('Error sending transactions:', error);\n            // }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.success-page {\n    text-align: center;\n    margin-top: 20px;\n}\n.contact-item {\n    display: flex;\n    justify-content: space-between;\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n</style>\n"],"mappings":";;AA2BA,OAAOA,gBAAe,MAAO,eAAe;AAE5C,eAAe;EACXC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;EAC7BC,UAAU,EAAE;IACRH;EACJ,CAAC;EACDI,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAClB;EACJ,CAAC;EACDC,QAAQ,EAAE;IACNC,WAAWA,CAAA,EAAG;MACV,OAAO,IAAI,CAACC,MAAK,GAAI,IAAI,CAACC,QAAQ,CAACC,MAAM;IAC7C,CAAC;IACDC,YAAYA,CAAA,EAAG;MACX,OAAO,IAAI,CAACT,OAAM,GAAI,IAAI,CAACK,WAAW;IAC1C;EACJ,CAAC;EACDK,OAAO,EAAE;IACL,MAAMC,OAAOA,CAAA,EAAG;MACZ,IAAI,CAACV,OAAM,GAAI,IAAI;MACnB,IAAI,CAACE,YAAW,GAAI,IAAI,CAACI,QAAQ,CAACK,GAAG,CAACC,OAAM,KAAM;QAC9CjB,IAAI,EAAEiB,OAAO,CAACjB,IAAI;QAClBU,MAAM,EAAE,IAAI,CAACA;MACjB,CAAC,CAAC,CAAC;;MAEH;MACAQ,UAAU,CAAC,MAAM;QACb,IAAI,CAACb,OAAM,GAAI,KAAK;QACpB,IAAI,CAACC,WAAU,GAAI,IAAI;QACvBa,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAACb,YAAY,CAAC;MACpE,CAAC,EAAE,IAAI,CAAC;;MAER;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}